= Amazon Elastic Map Reduce Ruby Client Readme 

Location of the Ruby Client: 

  http://elasticmapreduce.s3.amazonaws.com/elastic-mapreduce-ruby.zip

Welcome the Amazon Elastic Map Reduce Ruby Client. This package
contains a pure ruby client for the Amazon Elastic Map Reduce Web
Service. Amazon Elastic Map Reduce is a service that makes it easy for
researchers, data analysts, and developers to efficiently and
cost-effectively process vast amounts of data using the Amazon EC2.
The service launches the EC2 instances on behalf of customers to
process data, monitors execution and, when the processing is over,
shuts down EC2 instances.

It is assumed that the reader is already familiar with Hadoop and the
writing of Map Reduce jobs. More information on how to write
Map Reduce jobs can be found at the Hadoop website
(http://hadoop.apache.org/).

The version of Hadoop used by Amazon Elastic Map Reduce is 0.18.3.

== Conventions Used in this Document 

Commands that you execute from a bash shell are indented and begin
with $.

  $ echo "This is an example"
  This is an example

The output of the command is sometimes shown directly below the
command.

Sometimes example contain a value that you should modify to your own
situation, for example

  $ elastic-mapreduce --jobflow j-ABABABABAB --terminate

In this example you should replace j-ABABABABAB with the id of the
jobflow that you wish to terminate. Another common example is
s3://mybucket/input. You should replace this with a path iin to S3
that contains the data that you want to process.

Other times a value for replacement will be enclosed in angle
brackets. For example <insert_your_aws_access_id_here>. You should
replace this with your aws access id including the angle brackets,
e.g.

  "access-id": "<insert your aws access id here>",

becomes

  "access-id": "AAAAAJABASBASBJASAAA",

== Installation and Dependencies

The Amazon Elastic Map Reduce Ruby Client requires Ruby version 1.8
and has been tested on Linux systems. The client will probably work on
a windows system.

To run the client you will need to have signed up for Amazon Elastic
Computing Service at http://aws.amazon.com. Amazon Elastic MapReduce
uses Amazon Elastic Compute Cloud to run your job flows and Amazon
Simple Storage Service to store and access your data.  After
completing the sign-up process, you will have signed up to use Amazon
Elastic Compute Cloud and Simple Storage Service.

=== Step 1: Download and Install Ruby

If you already have ruby installed you can skip this step. On Ubuntu
and Debian systems you install ruby with:

  $ apt-get install ruby1.8

On Redhat systems you can install ruby with

  yum install ruby

On Macs you should already have ruby installed.

On Windows you can install ruby using the 1-click windows installer
for ruby. We recommend you install the Final Release available at:

  http://rubyinstaller.rubyforge.org/wiki/wiki.pl

You can test that ruby is installed by typing

  ruby -v

at the command prompt.

=== Step 2: Download the Amazon Elastic MapReduce Ruby Client

The latest version of the ruby client can be obtained by

  $ mkdir elastic-mapreduce-ruby
  $ cd elastic-mapreduce-ruby
  $ wget http://elasticmapreduce.s3.amazonaws.com/elastic-mapreduce-ruby.zip

Unzip the archive

  $ unzip elastic-mapreduce-ruby.zip

=== Step 2a: Edit Your Path

If you're running bash or zsh as your shell then you can add the directory
where you installed the elastic-mapreduce program to your path with

   $ export PATH=$PATH:<directory_where_you_unzipped_elastic_mapreduce_client>

For csh or tcsh

   $ set path = ($path <directory_where_you_unzipped_elastic_mapreduce_client>

=== Step 3: Create a Credentials File

Make sure you are already in the elastic-mapreduce-ruby
directory. Substitute your access key and private key into the
following command. These credentials are available on the
http://aws.amazon.com website under "Your Account/Access Identifiers"
(top right).

  $ cat > credentials.json
  {
    "access-id": "<insert your aws access id here>",
    "private-key": "<insert your aws secret access key here>",
    "key-pair": "<insert the name of your amazon ec2 key pair here>",
    "key-pair-file": "<insert the path to the .pem file for your amazon ec2 key pair here>",
    "region": "<The region where you wish to launch your job flows. Should be one of us-east-1, us-west-1 or eu-west-1>"    
  }

[Windows Users] If you're running Windows then create a
credentials.json file using notepad with the content above between and
include the braces.

You do not have to include a key pair in the credentials file, but it
is a good idea to include it now so that when you run job flows you'll
be able to log onto the master node to see the log files.

If you don't have an EC2 key pair you can create one now at

  https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs

Save the pem file somewhere safe for later. You'll need it log onto
the master node.

If region is not specified the client will default to us-east-1. Because you 
pay for cross region data transfer, the region you create your job flows in 
should be the one where your S3 input data exists. 

[Note] If you have credentials in a file other than credentials.json
in the current directory then you can specify that file on the command
line via:

  $ elastic-mapreduce -c <yourcredentialsfile>.json --list

[Windows Users] Windows users must specify "ruby" on the command line
instead of "./". So the above command would be

  C:\> ruby elastic-mapreduce -c <yourcredentialsfile>.json --list

You can also specify access id and private key and key pair on the command line

  $ elastic-mapreduce -a <access-id> -k <private-key> --key-pair <key-pair> --list

Similarly you can specify region on the command line:

  $ elastic-mapreduce --region us-east-1 --list

However note that job flow listings are region specific. So if you create a job  
flow with region eu-west-1 then you won't be able to see it in the list if you
specify us-east-1. 

== Basic Usage

You can get a summary of supported command line options with:

  $ elastic-mapreduce --help                             

=== Listing Job Flows

The web service supports the following operations: --list, --describe, --create,
--terminate, --stream, and --jar. To list job flows created in the
last 2 days:

  $ elastic-mapreduce --list
  j-1YE2DN7RXJBWU     FAILED                                                      Example Job Flow
     CANCELLED      Custom Jar                    
  j-3GJ4FRRNKGY97     COMPLETED      ec2-67-202-3-73.compute-1.amazonaws.com      Example job flow
  j-5XXFIQS8PFNW      COMPLETED      ec2-67-202-51-30.compute-1.amazonaws.com     demo 3/24 s1
     COMPLETED      Custom Jar                    

If you have not created any job flows in the last two days you will
get no output from the command. 

The example above shows three job flows created in the last two days. The
indented lines are job flow steps. The columns for a job flow line are
Job Flow Id, Job Flow State, Master Node DNS Name, and Job Flow
Name. The columns for a job flow step line are Step State, and Step
Name.

To get more information about a specific job flow use --describe and
supply the job flow id with the --jobflow parameters.

  $ elastic-mapreduce --describe --jobflow <job_flow_id>
  {
    "JobFlows": [
      {
        "LogUri": null,
        "Name": "Development Job Flow",
        "ExecutionStatusDetail": {
          "EndDateTime": 1237948135.0,
          "CreationDateTime": 1237947852.0,
          "LastStateChangeReason": null,
          "State": "COMPLETED",
          "StartDateTime": 1237948085.0
        },
        "Steps": [],
        "Instances": {
          "Ec2KeyName": null,
          "InstanceCount": 1.0,
          "Placement": {
            "AvailabilityZone": "us-east-1a"
          },
          "KeepJobFlowAliveWhenNoSteps": false,
          "MasterInstanceType": "m1.small",
          "SlaveInstanceType": "m1.small",
          "MasterPublicDnsName": "ec2-67-202-3-73.compute-1.amazonaws.com",
          "MasterInstanceId": "i-39325750"
        },
        "JobFlowId": "j-3GJ4FRRNKGY97"
      }
    ]
  }

You can also list running and starting jobs with

  $ elastic-mapreduce --list --active

This will list job flows that are starting, running, or shutting
down. You can also list job flows that are in one of several states
with:

  $ elastic-mapreduce --list --state RUNNING --state TERMINATED

This will list job flows that are either running or terminated.

=== Running a Devlopment Job Flow

When developing steps for a job flow it is handy to keep a job flow
running and to add steps to it. This way if the step fails you can
simply add another step without having to incur the startup cost of a
job flow.

The following command will start a job flow that will keep running and
consuming resources until you terminate it.

  $ elastic-mapreduce --create --alive --log-uri s3://my-example-bucket/logs
  Created job flow j-36U2JMAE73054

By default this will launch a job flow running on a single m1.small
instance. Later when you've got your steps running correctly on small
sample data you'll want to launch job flows running on more
instance. You can specify the number of instance and the type of
instance to run with the --num-instances and --instance-type options.

The --alive option tells the job flow to keep running even when it has
finished all its steps. The log-uri specifies a location in Amazon S3 for
the log files from your job flow to be pushed. 

It can be safely omitted if you haven't created a bucket yet in Amazon
S3. Log files are not pushed to Amazon S3 until 5 minutes after the
step is complete, so for debug sessions you will most likely log onto
the master node of your job flow. Specifying a log-uri is required if
you want to be able to read log files from Amazon S3 after the job flow has
terminated.

Now that your job flow has been created you can add a streaming step
to the job flow.

  $ elastic-mapreduce --jobflow <j-insert your job id here> --stream
  Added steps to <j-insert your job id here>

Default parameters are added to the streaming step. The name is set to
"Example Streaming Step". The action on failure is set to
"CANCEL_AND_WAIT" which means that if the step fails then subsequent
steps will be cancelled and the job flow will wait for additional
steps to be added before proceeding. The streaming task is a wordcount
example written in Python and reading input from

  s3://elasticmapreduce/samples/wordcount/input

You can list the job flow to see the default parameters that have been
set.

  $ elastic-mapreduce --jobflow j-36U2JMAE73054 --describe
  { "JobFlows": [{ 
      "LogUri": null,
      "Name": "Example job flow",
      "ExecutionStatusDetail": { ... },
      "Steps": [
        { "StepConfig": { ... },
          "ExecutionStatusDetail": { ... }
        }
      ],
      "Instances": { ... }
    }]
  }

=== Debugging a Failed Step

First lets add a step to our job flow that will fail. If you don't
have a running job flow look at the section on running job flows to
see how to start a job flow that will wait for you to add steps.

  $ elastic-mapreduce --jobflow j-36U2JMAE73054 --stream --output hdfs://examples/output
  Added steps to j-36U2JMAE73054

This job will fail because the hdfs path is wrong. It should have
three slashes rather than two after the colon. Now lets log onto the
master node to find the log files associated with this step.

If you entered a key pair and a key pair file into the credentials
file you can now log onto the master node with:

  $ elastic-mapreduce --jobflow j-ABABABABABA --ssh 

For this command to work requires that have an ssh client installed on
your machine. This is already the case for most unix and linux
machines. On Windows you'll need to install Cygwin including ruby and
openssh-client and execute the elastic-mapreduce client from within
Cygwin.

You can also use Putty but this is significantly more work. See the
tutorial at http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2729.

Once logged into the master node you can see log files for your steps in

  $ ls /mnt/var/log/hadoop/steps/
  1
  $ ls /mnt/var/log/hadoop/steps/1
  controller  stderr  stdout  syslog
  $ cat /mnt/var/log/hadoop/steps/1/syslog
  2009-03-25 18:43:27,145 WARN org.apache.hadoop.mapred.JobClient (main): Use 
    GenericOptionsParser for parsing the arguments. Applications should implement Tool for the same.
  2009-03-25 18:43:28,828 ERROR org.apache.hadoop.streaming.StreamJob (main): Error 
    Launching job : unknown host: examples
  $ exit

This error from Hadoop indicates that it was trying to look for a host
called examples. If we look back at our request we see that the output
path was set to hdfs://examples/output. This is actually incorrect
since we want Hadoop to access the local HDFS system with the path
/examples/output. We instead need to specify hdfs:///examples/output,
as we do below.

To fix this lets specify the output of the streaming job on the
command line and submit another step to our job flow.

  $ elastic-mapreduce --jobflow j-36U2JMAE73054 --stream --output hdfs:///examples/output

Now we list job flows to watch it complete:

  $ elastic-mapreduce --list -n 5 
  j-36U2JMAE73054     WAITING        ec2-67-202-20-49.compute-1.amazonaws.com     Example job flow
     FAILED         Example Streaming Step        
     COMPLETED      Example Streaming Step        

This time the job succeeded. We can run the job again but this time
output the result to a bucket in Amazon S3. First lets create a bucket
in Amazon S3. Note that buckets in Amazon S3 are unique so you will
need to choose a unique name for your bucket.

You can create a bucket using s3cmd which is available on Debian and
Ubuntu systems via apt-get, or using Amazon S3 Organizer which is a
plugin for Firefox.

If you're not on a Debian or Ubuntu system then s3cmd can be
downloaded from http://freshmeat.net/projects/s3cmd

Amazon S3 Organizer is available at 
https://addons.mozilla.org/en-US/firefox/addon/3247 

To create an Amazon S3 bucket using s3cmd do the following:

  $ s3cmd mb s3://my-example-bucket
  Bucket 's3://my-example-bucket/' created

[Note] s3cmd requires s3 paths to be specified using the prefix s3://,
where as Amazon Elastic MapReduce follows Hadoop which requires the
prefix s3:// for files in stored in Amazon S3.

Now you can add a step to the job flow to some results into the bucket
you created:

  $ elastic-mapreduce -j j-36U2JMAE73054 --stream \
      --output s3://my-example-bucket/output/1
  Added steps to j-36U2JMAE73054

Note that the protocol of the output URL is s3. This tells Hadoop to
use the S3 Native File System for the output location. The 'host' part
of the URL is the bucket and this is followed by path.

Once you've finished with your job flow don't forget to terminate it with

  $ elastic-mapreduce --jobflow j-36U2JMAE73054 --terminate 

And see that it is shutting down with

  $ elastic-mapreduce --list -n 5

There are other options that you can specify when creating and adding
steps to job flows. Use the "--help" option to find out what they are.

You can also list the log files from that last step in your jobflow
using the --logs argument.

  $ elastic-mapreduce --jobflow j-ABABABABABA --logs

To execute this command requires that you are running on a unix like
system with access to an ssh client because it fetches the logs from
the jobflow. It also requires that the jobflow is still running. If
the jobflow has shutdown then client may hang while attempting to
connect to the master node because the master node has already been
shut down.

==== Adding a Jar Step

I assume that you've already started a job flow. If you haven't look
at the first part of the "Running a Job Flow" section in this document. 

First start a development jobflow

  $ elastic-mapreduce --list --active
  j-36U2JMAE73054     WAITING        ec2-67-202-20-49.compute-1.amazonaws.com     Example job flow
    FAILED         Example Streaming Step        
    COMPLETED      Example Streaming Step        
    COMPLETED      Example Streaming Step        

You can add a jar step to your jobflow with:

  $ elastic-mapreduce --job flow j-36U2JMAE73054 \
    --jar s3://elasticmapreduce/samples/cloudburst/cloudburst.jar \
    --arg s3://elasticmapreduce/samples/cloudburst/input/s_suis.br \
    --arg s3://elasticmapreduce/samples/cloudburst/input/100k.br \
    --arg hdfs:///cloudburst/output/1 \
    --arg 36 --arg 3 --arg 0 --arg 1 --arg 240 --arg 48 --arg 24 \
    --arg 24 --arg 128 --arg 16

[Windows Users] The windows command line doesn't allow multi-line
commands using \ character. You'll have to edit these multi-line
examples in notepad to remove the \ characters and the line breaks.

This will run an example job flow step that downloads and runs the
jar. The arguments are passed to the main function in the jar.

If your jar doesn't have a manifest.mf specifying the main class you'll
need to specify the main class on the command line as:

  $ elastic-mapreduce -j j-36U2JMAE73054 \
    --jar        s3://my-example-bucket/wordcount.jar \
    --main-class org.myorg.WordCount \
    --arg        s3://elasticmapreduce/samples/wordcount/input/ \
    --arg        hdfs:///wordcount/output/1

If your job fails then log onto the master node as explained in the
section "Running a JobFlow" and look at the log files to find out why.

==== Adding a JobFlow from JSON

The samples directory included in with Elastic Map Reduce Ruby Client
contains several mutlistep job flows that can be run using the --json
command.

The json files contain variables for bucket names etc that you need to
replace with your own bucket.

  $ elastic-mapreduce -j j-36U2JMAE73054 \
    --json   samples/similarity/lastfm_jobflow.json \
    --param  '<bucket>=my-example-bucket'

This will add the job flow steps described in
samples/freebase/code/freebase_jobflow.json with <bucket> replaced by
my-example-bucket.

=== Samples ===

The samples directory contains the following sample job flows:

* LastFM Example
** Description: Calculation of Artist Similarity using data From LastFM
** URL: samples/similarity/lastfm_jobflow.json
** Parameters
*** <bucket>  : name of the output bucket

* Freebase Example
** Description: Load popular entries from Freebase into Amazon SimpleDB
** URL: samples/freebase/code/freebase_jobflow.json
** Parameters
*** <bucket>  : name of the output bucket

Additionally there are the following articles expaining how to use
Amazon Elastic Map Reduce.

* Sample Job Flows
    http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=263

* CloudBurst Sample Job Flow 
    http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2272

* WordCount Sample Job Flow 
    http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2273

* Similarities Sample Job Flow 
    http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2274

* Freebase Sample Job Flow 
    http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2275

=== Running a Custom Jar

This section assumes that you have already run a streaming jar and
that you are comfortable starting and debugging job flows.

==== Compiling and Uploading a Jar

First download a copy of Hadoop 18.3 from the the Hadoop website. 

  http://hadoop.apache.org/core/

Unpack the tar.gz archive somewhere handy like
/home/name/hadoop-0.18.3 or c:\hadoop if you are running on windows.

Next if you haven't already got Eclipse installed, then download
Eclipse from http://www.eclipse.org/downloads/ choosing "Eclipse IDE
for Java Developers".

Next in Eclipse create a new Java Project. In the libraries tab of the
build path settings add all the Hadoop Jars from the directory where
you unpacked Hadoop.

Next create a main class in your project. An example main class is
available here:

  http://hadoop.apache.org/core/docs/r0.18.3/mapred_tutorial.html. 

You can cut and paste the WordCount v1.0 source code from the browser
into Eclipse.

Now get Eclipse to export a Jar by selecting "Export" from the File
Menu and then choosing Jar. Select an output location for the jar on
your disk and click through next pages until you are able to specify a
Main-Class in the Java manifest. Choose the main function you added in
the previous step.

Now upload your jar to s3. For uploading you can use s3cmd which is
available under Debian and Ubuntu. Under windows a good option is S3
Organizer which is a Firefox plugin. For this example I'm going to use
s3cmd.

You'll have to select your own unique bucket name when running this
example yourself as the my-example-bucket already exists.

  $ s3cmd mb s3://my-example-bucket
  Bucket 's3://my-example-bucket/' created

  $ s3cmd put --force build/wordcount.jar s3://my-example-bucket/wordcount.jar

Note that by default s3cmd sets the access control on created bucket
and uploaded file to private which is probably what want. If you want
make your step accessible to other people you'll need to set the
access control on the bucket and the file to make them readable.

Now you're ready to execute a jar step on one of your job flows. If you
don't have job flow running look at the section on running a job flow
to see how to start a job flow.

Remember to replace in the following your own job flow id and the name
of your own bucket both in the jar name and the second --arg parameter.

  $ elastic-mapreduce --jobflow j-C019299B1X \
    --jar s3://my-example-bucket/wordcount.jar \
    --arg s3://elasticmapreduce/samples/wordcount/input 
    --arg s3://my-example-bucket/output

If you didn't specify the main-class in the manifest then you can
specify that now on the command line with the --main-class option.

  $ elastic-mapreduce --jobflow j-C019299B1X \
    --jar        s3://my-example-bucket/wordcount.jar \
    --main-class org.myorg.WordCount \
    --arg        s3://elasticmapreduce/samples/wordcount/input \
    --arg        s3://my-example-bucket/output

Now you can watch the job flow by listing it.

  $ elastic-mapreduce --list j-C019299B1X

If the step fails then take a look at the section on debugging a
job flow to find out how to log onto the master node and look at the
logs.

=== Running a Pig Program 

Pig provides a high level data manipulation language called Pig
Latin. Amazon Elastic MapReduce supports Pig version 0.3.0 See
http://hadoop.apache.org/pig/ for additional details.

==== Running Pig in Interactive Mode

To run a pig program in interactive mode you need to create a jobflow
that will stay alive until you terminate it.

  $ elastic-mapreduce --create --alive --name "Testing PIG -- $USER" \
      --num-instances 5 --instance-type c1.large \
      --hive-interactive
  Created jobflow j-ABABABABABAB

Next ssh to the master node and run pig

  $ elastic-mapreduce --jobflow j-ABABABABABAB --ssh 
  ...
  ec2-12.13.14 $ pig
  grunt>

You are now running pig in interactive mode and can execute Pig Latin statements.

==== Running Pig in Batch Mode

To run Pig in batch mode by adding a step to a development jobflow you
run:

  $ elastic-mapreduce --jobflow j-ABABABABABA \
     --pig-script --args s3://mybucket/myscript.pig

Or to run a jobflow that will execute a pig script run:

  $ elastic-mapreduce --create \
     --pig-script \
       --args -p,INPUT=s3://mybucket/input,-p,OUTPUT=s3://mybucket/output \
       --args s3://mybucket/myscript.pig

Note that the script argument must come last. After the paramters that
are passed to the script. These parameters become available within the
pig script being executed as $variable. So in the above example the
script can make reference to $input and $output within Pig string
literals.

You can also execute multiple pig scripts
within a single jobflow as

  $ elastic-mapreduce --create \
     --pig-script --step-name "Script 1" --args s3://mybucket/myscript.pig \
     --pig-script --step-name "Script 2" --args s3://mybucket/mysecondscript.pig

You can also specify multiple scripts to be added to a development
jobflow in the same way.

=== Running a Hive Program

Hive is a high level data processing language quite similar to SQL but
with a number of map reduce extensions. Amazon Elastic MapReduce
supports Hive version 0.4 with additional patches that allow better
integration with Amazon S3.

==== Running Hive in Interactive Mode

To run in interactive mode you need to create a jobflow that will stay
alive until you terminate it.

  $ elastic-mapreduce --create --alive --name "Testing Hive -- $USER" \
      --num-instances 5 --instance-type c1.large \
      --hive-interactive
  Created jobflow j-ABABABABABAB

Next ssh to the master node and run hive

  $ elastic-mapreduce --jobflow j-ABABABABABAB --ssh 
  ...
  ec2-12.13.14 $ hive
  hive>

You are now running hive in interactive mode and execute hive queries.

==== Running Hive in Batch Mode

To execute a hive script stored in S3 as apart of a jobflow create the
jobflow with a step that executes the hive script

  $ elastic-mapreduce --create \
     --hive-script --args s3://mybucket/myquery.q \
     --args -d,INPUT=s3://mybucket/input,-d,OUTPUT=s3://mybucket/output

The --args option provides arguments to the hive-script. The first
argument is the location of the script to be executed in S3. After
this the -d argument provides a way to pass values into the script.

Within Hive script these parameters are available as ${variable} so
for in the above example ${INPUT} and ${OUTPUT} would be replaced with
the values that were passed in. These variables are substituted as a
preprocessing step and so may occur anywhere within a hive script.

You can also add a hive script to a development jobflow, e.g.

  $ elastic-mapreduce --jobflow j-ABABABABABA \
     --hive-script --args s3://mybucket/myquery.q \
     --args -d,INPUT=s3://mybucket/input,-d,OUTPUT=s3://mybucket/output

This is useful when developing and testing script as in the case that
the script fail you can add a new step to the development jobflow
without having to wait for a new jobflow to start.

=== Terminating a Job Flow

All job flows that have been created with the --alive option will run
consuming instance hours until they are terminated.

A job flow can be terminated by specifying the job flow id.

  $ elastic-mapreduce --terminate --jobflow j-C019299B1X

== Using the Ruby Client as a Library

The program elastic-mapreduce is an example of how to use the
Amazon Elastic Map Reduce ruby library. Almost all of the file is
devoted to parsing command line arguments and translating them into
web service calls. 

To use the web service directly in your ruby programs you need

  $LOAD_PATH << File.dirname(__FILE__)
  require 'amazon/coral/elasticmapreduceclient'

  config = {
    :endpoint            => "https://elasticmapreduce.amazonaws.com",
    :ca_file             => File.join(File.dirname(__FILE__), "cacert.pem"),
    :aws_access_key      => my_access_id,
    :aws_secret_key      => my_secret_key,
    :signature_algorithm => :V2
  }
  client = Amazon::Coral::ElasticMapReduceClient.new_aws_query(config)

  puts client.DescribeJobFlows.inspect
  puts client.DescribeJobFlows('JobFlowId' => 'j-ABAYAS1019012').inspect

You can use the retry delegator to make your client retry if it gets
connection failures.

  $LOAD_PATH << File.dirname(__FILE__)
  require 'amazon/coral/elasticmapreduceclient'
  require 'amazon/retry_delegator'

  config = {
    :endpoint            => "https://elasticmapreduce.amazonaws.com",
    :ca_file             => File.join(File.dirname(__FILE__), "cacert.pem"),
    :aws_access_key      => my_access_id,
    :aws_secret_key      => my_secret_key,
    :signature_algorithm => :V2
  }
  client = Amazon::Coral::ElasticMapReduceClient.new_aws_query(config)

  is_retryable_error_response = Proc.new do |response| 
    if response == nil then
      false
    else
      ret = false
      if response['Error'] then 
        # don't retry on 'Timeout' because the call might have succeeded
        ret ||= ['InternalFailure', 'Throttling', 'ServiceUnavailable'].include?(response['Error']['Code'])
      end
      ret 
    end
  end

  client = Amazon::RetryDelegator.new(client, :retry_if => is_retryable_error_response)

  puts client.DescribeJobFlows.inspect
  puts client.DescribeJobFlows('JobFlowId' => 'j-ABAYAS1019012').inspect

More information about the operations of the Amazon Elastic Map Reduce
Web Service is available in the technical documentation for the
service.
